name: CI
on: [push, pull_request]

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [stable, beta, nightly, macos, windows]
        include:
          - build: stable
            os: ubuntu-latest
            rust: stable
          - build: beta
            os: ubuntu-latest
            rust: beta
          - build: nightly
            os: ubuntu-latest
            rust: nightly
          - build: macos
            os: macos-latest
            rust: stable
          - build: windows
            os: windows-latest
            rust: stable
    steps:
    - uses: actions/checkout@master
      with:
        submodules: 'recursive'
    - name: Install Rust (rustup)
      run: rustup update ${{ matrix.rust }} --no-self-update && rustup default ${{ matrix.rust }}
      if: matrix.os != 'macos-latest'
    - name: Install Rust (macos)
      run: |
        curl https://sh.rustup.rs | sh -s -- -y
        echo ::add-path::$HOME/.cargo/bin
      if: matrix.os == 'macos-latest'

    - name: Install Ninja (Linux)
      run: sudo apt install ninja-build
      if: matrix.os == 'ubuntu-latest'
    - name: Install Ninja (macOS)
      run: brew install ninja
      if: matrix.os == 'macos-latest'
    - name: Install Ninja (Windows)
      run: choco install ninja
      if: matrix.os == 'windows-latest'

    - name: Build wat2wasm
      run: |
        set -e
        cd tests/wabt
        cmake . -G Ninja
        ninja wast2json wat2wasm
      shell: bash
    - name: Add wat2wasm to path (unix)
      run: echo ::add-path::`pwd`/tests/wabt
      if: matrix.os != 'windows-latest'
    - name: Add wat2wasm to path (windows)
      run: echo ::add-path::D:/a/wast/wast/tests/wabt
      if: matrix.os == 'windows-latest'

    - run: cargo test
    - run: cargo test -p wast-parser

  rustfmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - name: Install Rust
      run: rustup update stable && rustup default stable && rustup component add rustfmt
    - run: cargo fmt -- --check

  fuzz:
    name: Fuzz
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [parser, binary, lexer]
    steps:
    - uses: actions/checkout@master
    - name: Install Rust
      run: rustup update nightly && rustup default nightly
    - run: cargo install cargo-fuzz
    - run: cargo fuzz run --release ${{ matrix.target }} -- -max_total_time=30 -jobs=2 -verbosity=0
      env:
        # See rust-fuzz/cargo-fuzz#161
        RUSTFLAGS: -C codegen-units=1
